{"version":3,"sources":["logo.svg","components/Header/Header.js","Services/URL_Service/index.js","Services/URL_Service/URL_Service.js","components/SaveURL/SaveURL.js","Services/SendMessageService/index.js","Services/SendMessageService/SendMessageService.js","components/SendMessage/SendMessage.js","components/Home/index.js","components/Home/Home.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","src","logo","alt","PureComponent","URL_Service","getURL","localStorage","getItem","setURL","URL","setItem","SaveURL","props","state","hasError","success","updateURL","bind","e","preventDefault","this","setState","target","value","length","setTimeout","onSubmit","type","onChange","placeholder","SendMessageService","sendSimpleMessageToDiscord","username","avatarURL","message","fetch","method","headers","body","JSON","stringify","avatar_url","content","sendEmbedMessageToDiscord","EmbedTitle","EmbedImageURL","color","embeds","SendMessage","Type","Username","AvatarURL","Message","PreviewColor","MessageColor","submits","updateTypeMessage","updateUsername","updateAvatarURL","updateEmbedTitle","updateEmbedImageURL","updateMessage","updateColor","sendMessage","defaultValue","required","rows","style","backgroundColor","parseInt","replace","Home","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.12a0d6af.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { PureComponent } from \"react\";\nimport logo from '../../logo.svg';\n\nclass Header extends PureComponent { \n  render () {\n    return (\n      <div>\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>React Discord WebHook</p>\n      </header>\n    </div>\n    );\n  }\n}\n\nexport default Header;\n","import URL_Service from \"./URL_Service\";\n\nexport default URL_Service;\n","\nconst URL_Service = {\n\n  getURL() {\n    const URL = localStorage.getItem(\"URL\");\n    if(URL) {\n      return localStorage.getItem(\"URL\");\n    }\n    return \"Not URL defined\"\n  },\n\n  setURL(URL) {\n    if(URL) {\n      return localStorage.setItem(\"URL\", URL);\n    }\n    return \"Error: URL Not valid\"\n  }\n  \n}\n\nexport default URL_Service;\n","import React, { PureComponent } from \"react\";\nimport \"./SaveURL.styles.css\";\nimport URL_Service from '../../Services/URL_Service'\n\nclass SaveURL extends PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasError: false,\n      success: false,\n      URL: URL_Service.getURL(),\n    };\n    this.updateURL = this.updateURL.bind(this);\n    this.getURL = this.getURL.bind(this);\n  }\n\n  updateURL(e) {\n    e.preventDefault();\n    this.setState({ URL: e.target.value });\n  }\n\n  getURL(e) {\n    e.preventDefault();\n    if(this.state.URL.length > 0) {\n      URL_Service.setURL(this.state.URL);\n      this.setState({\n        success: true\n      });\n      setTimeout(() => {\n        this.setState({\n          success: false\n        })\n      }, 3000);\n  \n    } else {\n      this.setState({\n        hasError: true\n      })\n      setTimeout(() => {\n        this.setState({\n          hasError: false\n        })\n      }, 2000);\n    }\n  }\n\n  render() {\n\n    return (\n      <div>\n        <div\n          className={`fade ${this.state.hasError && 'alert alert-danger show'}`}>\n          <strong>Something went wrong: URL invalid.</strong>\n        </div>\n        <div\n          className={`fade ${this.state.success && 'alert alert-info show'}`}>\n          <strong>URL Saved</strong>\n        </div>\n        <form onSubmit={this.getURL}>\n          <div className=\"form-group\">\n            <label><h2>WebHook URL</h2></label>\n            <input\n              type=\"URL\"\n              className=\"form-control text-center\"\n              onChange={this.updateURL}\n              value={this.state.URL}\n              placeholder=\"WebHook URL\"\n            />\n            <button type=\"submit\" className=\"btn btn-outline-primary mt-1\">\n              Save\n            </button>\n          </div>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default SaveURL;\n","import SendMessageService from \"./SendMessageService\";\n\nexport default SendMessageService;\n","import URL_Service from '../URL_Service'\n\nconst SendMessageService = {\n\n  sendSimpleMessageToDiscord(username, avatarURL, message) {\n    const URL = URL_Service.getURL()\n    fetch(URL, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        username: username,\n        avatar_url: avatarURL,\n        content: message\n      })\n    })\n  },\n\n  sendEmbedMessageToDiscord(username, avatarURL, EmbedTitle, EmbedImageURL, message, color) {\n    const URL = URL_Service.getURL()\n    fetch(URL, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        username: username,\n        avatar_url: avatarURL,\n        embeds: [{\n          \"title\": EmbedTitle,\n          \"image\": {\n            \"url\": EmbedImageURL\n          },\n          \"description\": message,\n          \"color\": color\n        }]\n      })\n    })\n  }\n  \n}\n\nexport default SendMessageService;\n","import React, { PureComponent } from \"react\";\nimport \"./SendMessage.styles.css\";\nimport SendMessageService from \"../../Services/SendMessageService/\";\n\nclass SendMessage extends PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      hasError: false,\n      success: false,\n      Type: \"simple\",\n      Username: \"React Discord WebHook\",\n      AvatarURL: \"\",\n      EmbedTitle: \"\",\n      EmbedImageURL: \"\",\n      Message: \"Test Message\",\n      PreviewColor: \"#07eaed\",\n      MessageColor: \"649452\",\n      submits: 0\n    };\n\n    this.updateTypeMessage = this.updateTypeMessage.bind(this);\n    this.updateUsername = this.updateUsername.bind(this);\n    this.updateAvatarURL = this.updateAvatarURL.bind(this);\n    this.updateEmbedTitle = this.updateEmbedTitle.bind(this);\n    this.updateEmbedImageURL = this.updateEmbedImageURL.bind(this);\n    this.updateMessage = this.updateMessage.bind(this);\n    this.updateColor = this.updateColor.bind(this);\n\n    this.sendMessage = this.sendMessage.bind(this);\n  }\n\n  render() {\n    return (\n      <div className=\"sendMessage p-5\">\n        <form onSubmit={this.sendMessage}>\n          <div className=\"form-group\">\n            <label>\n              <h2>Send Message</h2>\n            </label>\n            <div className=\"form-group\">\n              <label>Select Message Type</label>\n              <select\n                className=\"form-control\"\n                value={this.state.Type}\n                onChange={this.updateTypeMessage}\n              >\n                <option value=\"simple\">Simple Message</option>\n                <option value=\"embed\">Embed Message</option>\n              </select>\n            </div>\n\n            <div className=\"form-group\">\n              {this.state.hasError ? (\n                <div className=\"alert alert-danger show\">\n                  <strong>Something went wrong: Message Empty.</strong>\n                </div>\n              ) : (\n                \"\"\n              )}\n              {this.state.success ? (\n                <div className=\"alert alert-info collapse.show\">\n                  <strong>Message Sended, View discord!</strong>\n                </div>\n              ) : (\n                \"\"\n              )}\n              {this.state.submits > 5 ? (\n                <div className={`fade ${this.state.submits > 5 && \"alert alert-danger show\"}`}>\n                  <strong>\n                    Something went wrong: Wait a time to re-send another\n                    message.\n                  </strong>\n                </div>\n              ) : (\n                \"\"\n              )}\n              <label>Username</label>\n              <input\n                className=\"form-control\"\n                type=\"text\"\n                defaultValue={this.state.Username}\n                onChange={this.updateUsername}\n              />\n              <label>Avatar URL</label>\n              <input\n                className=\"form-control\"\n                type=\"text\"\n                value={this.state.AvatarURL}\n                onChange={this.updateAvatarURL}\n              />\n                {this.state.Type === \"embed\" ? (\n                  <div className=\"fade show\">\n                    <label>Embed Title</label>\n                    <input\n                      className=\"form-control\"\n                      type=\"text\"\n                      value={this.state.EmbedTitle}\n                      onChange={this.updateEmbedTitle}\n                      required\n                    />\n                    <label>Embed Image</label>\n                    <input\n                      className=\"form-control\"\n                      type=\"text\"\n                      value={this.state.EmbedImageURL}\n                      onChange={this.updateEmbedImageURL}\n                      required\n                    />\n                  </div>\n                ) : (\n                  \"\"\n                )}\n\n              <label>Message</label>\n              <textarea\n                className=\"form-control\"\n                rows=\"3\"\n                defaultValue={this.state.Message}\n                onChange={this.updateMessage}\n                required\n              ></textarea>\n            </div>\n            <div\n              className={`d-none ${\n                this.state.Type === \"embed\" && \"d-inline-flex p-2 show\"\n              }`}\n            >\n              <div>\n                <label>Select Color Embed</label>\n                <span className=\"color-picker\">\n                  <span\n                    className=\"circle\"\n                    style={{ backgroundColor: this.state.PreviewColor }}\n                  ></span>\n                  <input\n                    className=\"hidden\"\n                    type=\"color\"\n                    onChange={this.updateColor}\n                  />\n                  <p>{this.state.PreviewColor}</p>\n                </span>\n              </div>\n            </div>\n            <div>\n              <small className=\"text-muted\">\n                <button className=\"btn btn-outline-success\" type=\"submit\">\n                  Send Message\n                </button>\n              </small>\n            </div>\n          </div>\n        </form>\n      </div>\n    );\n  }\n\n  updateTypeMessage(e) {\n    e.preventDefault();\n    this.setState({\n      Type: e.target.value,\n    });\n  }\n\n  updateUsername(e) {\n    e.preventDefault();\n    this.setState({\n      Username: e.target.value,\n    });\n  }\n\n  updateAvatarURL(e) {\n    e.preventDefault();\n    this.setState({\n      AvatarURL: e.target.value,\n    });\n  }\n\n  updateEmbedTitle(e) {\n    e.preventDefault();\n    this.setState({\n      EmbedTitle: e.target.value,\n    });\n  }\n\n  updateEmbedImageURL(e) {\n    e.preventDefault();\n    this.setState({\n      EmbedImageURL: e.target.value\n    });\n  }\n\n  updateMessage(e) {\n    e.preventDefault();\n    this.setState({\n      Message: e.target.value,\n    });\n  }\n\n  updateColor(e) {\n    e.preventDefault();\n    this.setState({\n      PreviewColor: e.target.value,\n      MessageColor: parseInt(e.target.value.replace(\"#\", \"\"), 16),\n    });\n  }\n\n  sendMessage(e) {\n    e.preventDefault();\n    this.setState({\n      submits: this.state.submits + 1,\n    });\n\n    if (this.state.submits > 4) {\n      setTimeout(() => {\n        this.setState({\n          submits: 0,\n        });\n      }, 5000);\n      return;\n    }\n    if (this.state.Message.length > 0) {\n      this.setState({\n        success: true,\n      });\n      setTimeout(() => {\n        this.setState({\n          success: false,\n        });\n      }, 3000);\n      switch (this.state.Type) {\n        case \"embed\": {\n          SendMessageService.sendEmbedMessageToDiscord(\n            this.state.Username,\n            this.state.AvatarURL,\n            this.state.EmbedTitle,\n            this.state.EmbedImageURL,\n            this.state.Message,\n            this.state.MessageColor\n          );\n          break;\n        }\n        case \"simple\": {\n          SendMessageService.sendSimpleMessageToDiscord(\n            this.state.Username,\n            this.state.AvatarURL,\n            this.state.Message\n          );\n          break;\n        }\n\n        default:\n          break;\n      }\n    } else {\n      this.setState({\n        hasError: true,\n      });\n      setTimeout(() => {\n        this.setState({\n          hasError: false,\n        });\n      }, 2000);\n    }\n  }\n}\n\nexport default SendMessage;\n","import Home from \"./Home\";\n\nexport default Home;\n","import React, { PureComponent } from \"react\";\nimport Header from \"../Header/Header\";\nimport SaveURL from \"../SaveURL/SaveURL\";\nimport SendMessage from \"../SendMessage/SendMessage\";\n//import \"./Home.styles\";\n\nclass Home extends PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasError: false,\n    };\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <h1>Something went wrong.</h1>;\n    }\n    return (\n      <div>\n        <Header />\n        <div className=\"container\">\n          <SaveURL />\n          <SendMessage />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Home;\n","import React from 'react';\nimport './App.css';\nimport Home from './components/Home';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Home />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}